{
  "name": "C",
  "version": "C99/C11",
  "characterSets": {
    "identifierStart": "_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "identifierContinue": "_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
    "operators": "+-*/%=<>!&|^~?:",
    "delimiters": "()[]{},;.",
    "whitespace": " \\t\\n\\r\\f\\v"
  },
  "keywords": [
    "auto", "break", "case", "char", "const", "continue", "default", "do", 
    "double", "else", "enum", "extern", "float", "for", "goto", "if", 
    "int", "long", "register", "return", "short", "signed", "sizeof", "static", 
    "struct", "switch", "typedef", "union", "unsigned", "void", "volatile", "while"
  ],
  "types": [
    "int", "char", "short", "long", "float", "double", "void", "signed", "unsigned"
  ],
  "commentConfig": {
    "singleLineCommentStarts": ["//"],
    "multiLineCommentDelimiters": [
      {
        "start": "/*",
        "end": "*/"
      }
    ]
  },
  "stringConfig": {
    "stringDelimiters": [
      {
        "start": "\"",
        "end": "\""
      }
    ],
    "escapeChar": "\\"
  },
  "numberConfig": {
    "decimalIntPattern": "\\b[0-9]+\\b",
    "floatingPointPattern": "\\b[0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+\\b",
    "hexPattern": "\\b0[xX][0-9a-fA-F]+\\b",
    "octalPattern": "\\b0[0-7]+\\b",
    "scientificPattern": "\\b[0-9]+(\\.[0-9]+)?[eE][+-]?[0-9]+\\b"
  },
  "preprocessorConfig": {
    "directiveStart": "#",
    "directives": ["include", "define", "undef", "if", "ifdef", "ifndef", "else", "elif", "endif", "line", "error", "pragma"]
  },
  "tokenRules": [
    {
      "name": "Identifier",
      "pattern": "[a-zA-Z_][a-zA-Z0-9_]*",
      "type": 8,
      "precedence": 1
    },
    {
      "name": "HexNumber",
      "pattern": "0[xX][0-9a-fA-F]+",
      "type": 2,
      "precedence": 2
    },
    {
      "name": "OctalNumber",
      "pattern": "0[0-7]+",
      "type": 3,
      "precedence": 2
    },
    {
      "name": "FloatNumber",
      "pattern": "[0-9]+\\.[0-9]+",
      "type": 1,
      "precedence": 2
    },
    {
      "name": "IntNumber",
      "pattern": "[0-9]+",
      "type": 0,
      "precedence": 2
    }
  ]
} {
  "characterSets": {
    "delimiters": "()[]{},;.",
    "identifierContinue": "_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
    "identifierStart": "_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "operators": "+-*/%=<>!&|^~?:",
    "whitespace": " \t\n\r\f\u000b"
  },
  "commentConfig": {
    "multiLineCommentDelimiters": [
      {
        "end": "*/",
        "start": "/*"
      }
    ],
    "singleLineCommentStarts": [
      "//"
    ]
  },
  "keywords": [
    "nullptr",
    "noexcept",
    "alignof",
    "virtual",
    "typeid",
    "try",
    "constexpr",
    "true",
    "public",
    "this",
    "protected",
    "private",
    "operator",
    "namespace",
    "using",
    "inline",
    "false",
    "explicit",
    "dynamic_cast",
    "static_assert",
    "delete",
    "const_cast",
    "decltype",
    "class",
    "signed",
    "mutable",
    "reinterpret_cast",
    "catch",
    "while",
    "template",
    "volatile",
    "void",
    "thread_local",
    "static_cast",
    "unsigned",
    "export",
    "union",
    "throw",
    "char",
    "typedef",
    "switch",
    "bool",
    "default",
    "struct",
    "new",
    "wchar_t",
    "friend",
    "static",
    "long",
    "sizeof",
    "double",
    "else",
    "enum",
    "short",
    "if",
    "return",
    "float",
    "extern",
    "asm",
    "break",
    "auto",
    "register",
    "alignas",
    "goto",
    "continue",
    "do",
    "int",
    "for",
    "const",
    "typename",
    "case"
  ],
  "name": "C++",
  "numberConfig": {
    "binaryPattern": "",
    "decimalIntPattern": "\\b[0-9]+\\b",
    "floatingPointPattern": "\\b[0-9]+\\.[0-9]+\\b",
    "hexPattern": "\\b0[xX][0-9a-fA-F]+\\b",
    "octalPattern": "\\b0[0-7]+\\b",
    "scientificPattern": "\\b[0-9]+(\\.[0-9]+)?[eE][+-]?[0-9]+\\b"
  },
  "stringConfig": {
    "charDelimiters": [
      {
        "end": "'",
        "start": "'"
      }
    ],
    "escapeChar": "\\",
    "rawStringPrefix": "R",
    "stringDelimiters": [
      {
        "end": "\"",
        "start": "\""
      }
    ]
  },
  "tokenRules": [
    {
      "name": "Identifier",
      "pattern": "[a-zA-Z_][a-zA-Z0-9_]*",
      "precedence": 1,
      "type": 8
    },
    {
      "name": "HexNumber",
      "pattern": "0[xX][0-9a-fA-F]+",
      "precedence": 2,
      "type": 2
    },
    {
      "name": "OctalNumber",
      "pattern": "0[0-7]+",
      "precedence": 2,
      "type": 3
    },
    {
      "name": "ScientificNumber",
      "pattern": "[0-9]+(\\\\.[0-9]+)?[eE][+-]?[0-9]+",
      "precedence": 2,
      "type": 5
    },
    {
      "name": "FloatNumber",
      "pattern": "[0-9]+\\\\.[0-9]+",
      "precedence": 2,
      "type": 1
    },
    {
      "name": "IntNumber",
      "pattern": "[0-9]+",
      "precedence": 2,
      "type": 0
    },
    {
      "name": "BinaryNumber",
      "pattern": "0[bB][01]+",
      "precedence": 2,
      "type": 4
    }
  ],
  "types": [
    "char32_t",
    "char16_t",
    "wchar_t",
    "signed",
    "double",
    "int",
    "bool",
    "float",
    "unsigned",
    "auto",
    "long",
    "short",
    "void",
    "char"
  ],
  "version": "C++17"
}{
  "name": "Java",
  "version": "Java 15",
  "characterSets": {
    "identifierStart": "_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "identifierContinue": "_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
    "operators": "+-*/%=<>!&|^~?:",
    "delimiters": "()[]{},;.",
    "whitespace": " \\t\\n\\r\\f\\v"
  },
  "keywords": [
    "abstract", "assert", "boolean", "break", "byte", "case", "catch", "char",
    "class", "const", "continue", "default", "do", "double", "else", "enum",
    "extends", "final", "finally", "float", "for", "goto", "if", "implements",
    "import", "instanceof", "int", "interface", "long", "native", "new",
    "package", "private", "protected", "public", "return", "short", "static",
    "strictfp", "super", "switch", "synchronized", "this", "throw", "throws",
    "transient", "try", "void", "volatile", "while", "var", "true", "false", "null"
  ],
  "types": [
    "boolean", "byte", "char", "double", "float", "int", "long", "short", "void"
  ],
  "commentConfig": {
    "singleLineCommentStarts": ["//"],
    "multiLineCommentDelimiters": [
      {
        "start": "/*",
        "end": "*/"
      }
    ],
    "docCommentStarts": ["/**"],
    "docCommentDelimiters": [
      {
        "start": "/**",
        "end": "*/"
      }
    ]
  },
  "stringConfig": {
    "stringDelimiters": [
      {
        "start": "\"",
        "end": "\""
      }
    ],
    "escapeChar": "\\",
    "characterDelimiters": [
      {
        "start": "'",
        "end": "'"
      }
    ]
  },
  "numberConfig": {
    "decimalIntPattern": "\\b[0-9]+[lL]?\\b",
    "floatingPointPattern": "\\b[0-9]+\\.[0-9]*[fFdD]?|[0-9]*\\.[0-9]+[fFdD]?\\b",
    "hexPattern": "\\b0[xX][0-9a-fA-F]+[lL]?\\b",
    "octalPattern": "\\b0[0-7]+[lL]?\\b",
    "binaryPattern": "\\b0[bB][01]+[lL]?\\b",
    "scientificPattern": "\\b[0-9]+(\\.[0-9]+)?[eE][+-]?[0-9]+[fFdD]?\\b"
  },
  "tokenRules": [
    {
      "name": "Identifier",
      "pattern": "[a-zA-Z_][a-zA-Z0-9_]*",
      "type": 8,
      "precedence": 1
    },
    {
      "name": "HexNumber",
      "pattern": "0[xX][0-9a-fA-F]+[lL]?",
      "type": 2,
      "precedence": 2
    },
    {
      "name": "BinaryNumber",
      "pattern": "0[bB][01]+[lL]?",
      "type": 4,
      "precedence": 2
    },
    {
      "name": "OctalNumber",
      "pattern": "0[0-7]+[lL]?",
      "type": 3,
      "precedence": 2
    },
    {
      "name": "FloatNumber",
      "pattern": "[0-9]+\\.[0-9]*[fFdD]?|[0-9]*\\.[0-9]+[fFdD]?",
      "type": 1,
      "precedence": 2
    },
    {
      "name": "IntNumber",
      "pattern": "[0-9]+[lL]?",
      "type": 0,
      "precedence": 2
    }
  ]
} {
  "characterSets": {
    "delimiters": "()[]{},;.",
    "identifierContinue": "_$abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
    "identifierStart": "_$abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "operators": "+-*/%=<>!&|^~?:",
    "whitespace": " \t\n\r\f\u000b"
  },
  "commentConfig": {
    "multiLineCommentDelimiters": [
      {
        "end": "*/",
        "start": "/*"
      }
    ],
    "singleLineCommentStarts": [
      "//"
    ]
  },
  "keywords": [
    "false",
    "true",
    "null",
    "public",
    "await",
    "let",
    "interface",
    "yield",
    "with",
    "package",
    "void",
    "async",
    "throw",
    "super",
    "export",
    "instanceof",
    "var",
    "if",
    "static",
    "new",
    "delete",
    "break",
    "default",
    "while",
    "finally",
    "function",
    "private",
    "debugger",
    "typeof",
    "continue",
    "else",
    "return",
    "this",
    "in",
    "do",
    "for",
    "catch",
    "const",
    "implements",
    "enum",
    "extends",
    "switch",
    "import",
    "protected",
    "try",
    "class",
    "case"
  ],
  "name": "JavaScript",
  "numberConfig": {
    "binaryPattern": "\\b0[bB][01]+\\b",
    "decimalIntPattern": "\\b[0-9]+\\b",
    "floatingPointPattern": "\\b[0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+\\b",
    "hexPattern": "\\b0[xX][0-9a-fA-F]+\\b",
    "octalPattern": "\\b0[oO][0-7]+\\b",
    "scientificPattern": "\\b[0-9]+(\\.[0-9]+)?[eE][+-]?[0-9]+\\b"
  },
  "stringConfig": {
    "charDelimiters": [],
    "escapeChar": "\\",
    "rawStringPrefix": "",
    "stringDelimiters": [
      {
        "end": "\"",
        "start": "\""
      },
      {
        "end": "'",
        "start": "'"
      },
      {
        "end": "`",
        "start": "`"
      }
    ]
  },
  "tokenRules": [
    {
      "name": "Identifier",
      "pattern": "[$_a-zA-Z][$_a-zA-Z0-9]*",
      "precedence": 1,
      "type": 8
    },
    {
      "name": "HexNumber",
      "pattern": "0[xX][0-9a-fA-F]+",
      "precedence": 2,
      "type": 2
    },
    {
      "name": "BinaryNumber",
      "pattern": "0[bB][01]+",
      "precedence": 2,
      "type": 4
    },
    {
      "name": "OctalNumber",
      "pattern": "0[oO][0-7]+",
      "precedence": 2,
      "type": 3
    },
    {
      "name": "ScientificNumber",
      "pattern": "[0-9]+(\\.[0-9]+)?[eE][+-]?[0-9]+",
      "precedence": 2,
      "type": 5
    },
    {
      "name": "FloatNumber",
      "pattern": "[0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+",
      "precedence": 2,
      "type": 1
    },
    {
      "name": "IntNumber",
      "pattern": "[0-9]+",
      "precedence": 2,
      "type": 0
    },
    {
      "name": "SingleLineComment",
      "pattern": "//.*$",
      "precedence": 3,
      "type": 9
    },
    {
      "name": "MultiLineComment",
      "pattern": "/\\*[\\s\\S]*?\\*/",
      "precedence": 3,
      "type": 10
    },
    {
      "name": "String",
      "pattern": "\"([^\\\\\"]|\\\\.)*\"|'([^\\\\']|\\\\.)*'",
      "precedence": 2,
      "type": 7
    },
    {
      "name": "TemplateString",
      "pattern": "`([^\\\\`]|\\\\.)*`",
      "precedence": 2,
      "type": 11
    },
    {
      "name": "Operator",
      "pattern": "[\\+\\-\\*/%=<>!&|^~\\?:]+",
      "precedence": 1,
      "type": 6
    },
    {
      "name": "Punctuation",
      "pattern": "[\\(\\)\\[\\]\\{\\},;\\.]",
      "precedence": 1,
      "type": 12
    }
  ],
  "types": [],
  "version": "ECMAScript 2020",
  "fileExtensions": [".js", ".jsx", ".mjs", ".cjs"]
}{
  "name": "Python",
  "version": "Python 3.9",
  "characterSets": {
    "identifierStart": "_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "identifierContinue": "_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
    "operators": "+-*/%=<>!&|^~@",
    "delimiters": "()[]{},;:.",
    "whitespace": " \\t\\n\\r\\f\\v"
  },
  "keywords": [
    "False", "None", "True", "and", "as", "assert", "async", "await", "break",
    "class", "continue", "def", "del", "elif", "else", "except", "finally",
    "for", "from", "global", "if", "import", "in", "is", "lambda", "nonlocal",
    "not", "or", "pass", "raise", "return", "try", "while", "with", "yield"
  ],
  "builtins": [
    "abs", "all", "any", "bin", "bool", "bytearray", "bytes", "callable", "chr",
    "classmethod", "compile", "complex", "delattr", "dict", "dir", "divmod",
    "enumerate", "eval", "exec", "filter", "float", "format", "frozenset",
    "getattr", "globals", "hasattr", "hash", "help", "hex", "id", "input",
    "int", "isinstance", "issubclass", "iter", "len", "list", "locals", "map",
    "max", "memoryview", "min", "next", "object", "oct", "open", "ord", "pow",
    "print", "property", "range", "repr", "reversed", "round", "set", "setattr",
    "slice", "sorted", "staticmethod", "str", "sum", "super", "tuple", "type",
    "vars", "zip", "__import__"
  ],
  "commentConfig": {
    "singleLineCommentStarts": ["#"]
  },
  "stringConfig": {
    "stringDelimiters": [
      {
        "start": "\"",
        "end": "\""
      },
      {
        "start": "'",
        "end": "'"
      },
      {
        "start": "\"\"\"",
        "end": "\"\"\""
      },
      {
        "start": "'''",
        "end": "'''"
      }
    ],
    "escapeChar": "\\",
    "rawStringPrefix": "r"
  },
  "numberConfig": {
    "decimalIntPattern": "\\b[0-9]+\\b",
    "floatingPointPattern": "\\b[0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+\\b",
    "hexPattern": "\\b0[xX][0-9a-fA-F]+\\b",
    "octalPattern": "\\b0[oO][0-7]+\\b",
    "binaryPattern": "\\b0[bB][01]+\\b",
    "scientificPattern": "\\b[0-9]+(\\.[0-9]+)?[eE][+-]?[0-9]+\\b"
  },
  "tokenRules": [
    {
      "name": "Identifier",
      "pattern": "[a-zA-Z_][a-zA-Z0-9_]*",
      "type": 8,
      "precedence": 1
    },
    {
      "name": "HexNumber",
      "pattern": "0[xX][0-9a-fA-F]+",
      "type": 2,
      "precedence": 2
    },
    {
      "name": "BinaryNumber",
      "pattern": "0[bB][01]+",
      "type": 4,
      "precedence": 2
    },
    {
      "name": "OctalNumber",
      "pattern": "0[oO][0-7]+",
      "type": 3,
      "precedence": 2
    },
    {
      "name": "ScientificNumber",
      "pattern": "[0-9]+(\\.[0-9]+)?[eE][+-]?[0-9]+",
      "type": 5,
      "precedence": 2
    },
    {
      "name": "FloatNumber",
      "pattern": "[0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+",
      "type": 1,
      "precedence": 2
    },
    {
      "name": "IntNumber",
      "pattern": "[0-9]+",
      "type": 0,
      "precedence": 2
    }
  ]
} 